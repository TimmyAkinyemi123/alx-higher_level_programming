Instructions for 0-add_integer.py
===========================

This module simply performs an integer addition ``add_integer(a, b=98)``

``add_integer(...)``` returns the addition of its two arguments.
::

To import the function from the module
    >>> add_integer = __import__('0-add_integer').add_integer

To check correct result of addition
::
    >>> add_integer(5, 2)
    7
Positive and negative values
::
    >>> add_integer(3, -4)
    -1

Note: Floats must be typecasted to integers before operations
Floating point values
::
    >>> add_integer(2.3, 3.7)
    5
    >>> add_integer(-4.5, -6.2)
    -10

Floating-point and integer values
::
    >>> add_integer(3.5, -4)
    -1

The second argument 'b' has a default value of 98
::
    >>> add_integer(2)
    100

Check for non-integer or non-float values
::
``add_integer()`` expects that both arguments are either integers or floats.
Raises a TypeError if arguments are non-int and non-float

    >>> add_integer("True", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer
::
    >>> add_integer(2, "True")
    Traceback (most recent call last):
    TypeError: b must be an integer
::
    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer
::
    >>> add_integer(3.4, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

Note: if both arguments are non-integer and non-float, TypeError will be raised for the first argument

Check if arguments are strings
::
    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

If infinity is provided
::
    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     
::
    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

Check for NaN numbers.
::
    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer